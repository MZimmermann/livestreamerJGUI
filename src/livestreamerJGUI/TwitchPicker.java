/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package livestreamerJGUI;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import livestreamerJGUI.GamesInfo.Top;
import livestreamerJGUI.StreamsInfo.Stream;

/**
 *
 * @author Matthias
 */
public class TwitchPicker extends javax.swing.JFrame {

    Map<String, Pair<StreamsInfo, DefaultTableModel>> streamsForGame = new HashMap<>();
    private DefaultTableModel gamesTableModel;
    private final DefaultTableModel dummyModel = new DefaultTableModel();
    private String currentGame = "";

    private GamesInfo gamesInfo;

    public GamesInfo getGamesInfo() {
        return gamesInfo;
    }

    public void setGamesInfo(GamesInfo gamesInfo) {
        this.gamesInfo = gamesInfo;
    }

    /**
     * Creates new form TwitchPicker
     */
    public TwitchPicker() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        gameTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        streamTable = new javax.swing.JTable();
        bSelectGame = new javax.swing.JButton();
        bCancelGameSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        gameTable.setAutoCreateRowSorter(true);
        gameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        gameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gameTable);

        getContentPane().add(jScrollPane1);

        streamTable.setAutoCreateRowSorter(true);
        streamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(streamTable);

        getContentPane().add(jScrollPane2);

        bSelectGame.setText("Select");
        bSelectGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectGameActionPerformed(evt);
            }
        });
        getContentPane().add(bSelectGame);

        bCancelGameSelect.setText("Cancel");
        bCancelGameSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelGameSelectActionPerformed(evt);
            }
        });
        getContentPane().add(bCancelGameSelect);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSelectGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectGameActionPerformed
        String channelName = (String) this.streamTable.getModel().getValueAt(this.streamTable.getSelectedRow(), 0);
        String channelURL = getURLForStream(this.currentGame, channelName);
        this.dispose();
        LivestreamerJGUI.getInstance().setEnabled(true);
        LivestreamerJGUI.getInstance().toFront();
        LivestreamerJGUI.getInstance().setBrowseTwitchButtonEnabled(true);
        LivestreamerJGUI.getInstance().setURLFieldText(channelURL);
    }//GEN-LAST:event_bSelectGameActionPerformed

    private String getURLForStream(String game, String channel) {
        for (Stream s : this.streamsForGame.get(game).getE1().getStreams()) {
            if (s.getChannel().getName().equals(channel)) {
                return s.getChannel().getUrl();
            }
        }
        return null;
    }

    private void gameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameTableMouseClicked
        String gameName = this.gameTable.getModel().getValueAt(this.gameTable.getSelectedRow(), 0).toString();
        this.currentGame = gameName;
        if (this.streamsForGame.containsKey(gameName)) {
            this.streamTable.setModel(this.streamsForGame.get(gameName).getE2());
        } else {
            final Class[] classes = new Class[]{String.class, String.class, Integer.class};
            final String[] columnNames = new String[]{"Channel", "Status", "Viewers"};
            DefaultTableModel dtm = createTableModel(classes, columnNames);
            dtm.setColumnCount(3);
            String json;
            String url = "";
            try {
                url = "https://api.twitch.tv/kraken/streams?game=" + URLEncoder.encode(gameName, "UTF-8");
            } catch (UnsupportedEncodingException ex) {
            }
            json = getJsonStringFromTwitchApi(url);

            StreamsInfo streamsInfo = StreamsInfo.fromJson(json);
            for (Stream stream : streamsInfo.getStreams()) {
                Object[] rowData = new Object[3];
                rowData[0] = stream.getChannel().getName();
                rowData[1] = stream.getChannel().getStatus();
                rowData[2] = stream.getViewers();
                dtm.addRow(rowData);
            }
            Pair<StreamsInfo, DefaultTableModel> p = new Pair<>(streamsInfo, dtm);
            this.streamsForGame.put(gameName, p);
            this.streamTable.setModel(this.streamsForGame.get(gameName).getE2());
        }
        System.out.println(gameName);
    }//GEN-LAST:event_gameTableMouseClicked

    private void bCancelGameSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelGameSelectActionPerformed
        this.dispose();
        LivestreamerJGUI.getInstance().setEnabled(true);
        LivestreamerJGUI.getInstance().toFront();
        LivestreamerJGUI.getInstance().setBrowseTwitchButtonEnabled(true);
    }//GEN-LAST:event_bCancelGameSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TwitchPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TwitchPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TwitchPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TwitchPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(
                            UIManager.getSystemLookAndFeelClassName());
                } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
                }
                final TwitchPicker tp = new TwitchPicker();
                tp.setVisible(true);
                tp.pack();
                tp.setLocationRelativeTo(LivestreamerJGUI.getInstance());
                LivestreamerJGUI.getInstance().setEnabled(false);
                final Class[] classes = new Class[]{String.class, Integer.class};
                final String[] columnNames = new String[]{"Game", "Viewers"};
                tp.gamesTableModel = createTableModel(classes, columnNames);
                tp.gamesTableModel.setColumnCount(2);
                tp.gameTable.setModel(tp.gamesTableModel);
                String json = "";
                String url = "";
                url = "https://api.twitch.tv/kraken/games/top";
                json = getJsonStringFromTwitchApi(url);
                tp.gamesInfo = GamesInfo.fromJson(json);
                System.out.println(tp.gamesInfo.getTop()[0].getGame().getName());
                for (Top top : tp.gamesInfo.getTop()) {
                    Object[] data = new Object[2];
                    data[0] = top.getGame().getName();
                    data[1] = new Integer(top.getViewers());
                    tp.gamesTableModel.addRow(data);
                }
                tp.streamTable.setModel(tp.dummyModel);
                tp.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        tp.bCancelGameSelectActionPerformed(null);
                    }
                });
            }
        });
    }

    public static String getJsonStringFromTwitchApi(String url) {
        InputStream is = null;
        try {
            is = new URL(url).openStream();

            BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));

            StringBuilder sb = new StringBuilder();
            int cp;
            while ((cp = rd.read()) != -1) {
                sb.append((char) cp);
            }
            return sb.toString();
        } catch (IOException e) {
        } finally {
            try {
                is.close();
            } catch (IOException e) {

            }
        }
        return null;
    }

    public static DefaultTableModel createTableModel(final Class[] classes, final String[] columnNames) {
        DefaultTableModel model = new DefaultTableModel() {

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex < classes.length) {
                    return classes[columnIndex];
                }
                return super.getColumnClass(columnIndex);
            }

            @Override
            public String getColumnName(int column) {
                return columnNames[column];
            }

        };
        return model;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancelGameSelect;
    private javax.swing.JButton bSelectGame;
    private javax.swing.JTable gameTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable streamTable;
    // End of variables declaration//GEN-END:variables
}
